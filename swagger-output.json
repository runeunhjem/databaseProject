{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "My API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "description": "Retrieve a list of all available rooms.",
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "List of available rooms retrieved successfully.",
            "content": {
              "text/html": {}
            }
          },
          "500": {
            "description": "Internal server error - Failed to fetch rooms."
          }
        }
      },
      "delete": {
        "tags": [
          "Rooms"
        ],
        "description": "Delete a room (Admin Only).",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Room ID to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Room deleted successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Bad request - Missing room ID.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Hotel not found."
          },
          "500": {
            "description": "Internal server error - Failed to delete room.",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/{hotelId}/rooms": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "description": "Retrieve all rooms available for a specific hotel.",
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the hotel"
          }
        ],
        "responses": {
          "200": {
            "description": "Rooms retrieved successfully.",
            "content": {
              "text/html": {}
            }
          },
          "404": {
            "description": "Hotel not found or has no rooms.",
            "content": {
              "text/html": {
                "schema": {
                  "title": "Error",
                  "message": "Hotel Not Found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "text/html": {
                "schema": {
                  "title": "Error",
                  "message": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/{hotelId}": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "description": "Retrieve details of a specific hotel.",
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the hotel"
          }
        ],
        "responses": {
          "200": {
            "description": "Hotel details retrieved successfully.",
            "content": {
              "text/html": {}
            }
          },
          "404": {
            "description": "Hotel not found."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/hotels": {
      "post": {
        "tags": [
          "Hotels"
        ],
        "description": "Creates a new hotel with rooms. Admin access only.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Hotel details including name, location, and rooms",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Hotel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Hotel and rooms created successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Missing required fields."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/{hotelId}/reservations": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "description": "Retrieve all reservations for a specific hotel.",
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "Hotel ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Reservations retrieved successfully.",
            "content": {
              "text/html": {}
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/hotels/{hotelId}/rate": {
      "post": {
        "tags": [
          "Hotels"
        ],
        "description": "Allows a user to rate a hotel.",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the hotel"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Rating from 1 to 5",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "rating": {
                  "type": "number",
                  "example": 5
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hotel rated successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Invalid rating."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Retrieve a list of all users (Admin access required).",
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved users list.",
            "content": {
              "text/html": {
                "schema": {
                  "title": "Users",
                  "users": [
                    {
                      "id": 1,
                      "firstName": "John",
                      "lastName": "Doe",
                      "email": "john@example.com",
                      "role": "User"
                    },
                    {
                      "id": 2,
                      "firstName": "Jane",
                      "lastName": "Smith",
                      "email": "jane@example.com",
                      "role": "Admin"
                    }
                  ]
                }
              }
            }
          },
          "302": {
            "description": "Found"
          },
          "500": {
            "description": "Internal server error - Unable to fetch users."
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Retrieve details of a specific user (Admin or the user themselves).",
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user details.",
            "content": {
              "text/html": {
                "schema": {
                  "title": "User Details",
                  "user": {
                    "id": 1,
                    "firstName": "John",
                    "lastName": "Doe",
                    "email": "john@example.com",
                    "role": "User"
                  }
                }
              }
            }
          },
          "302": {
            "description": "Found"
          },
          "404": {
            "description": "User not found.",
            "content": {
              "text/html": {
                "schema": {
                  "title": "Error",
                  "message": "User Not Found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - Failed to retrieve user details.",
            "content": {
              "text/html": {
                "schema": {
                  "title": "Error",
                  "message": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "Delete a user (Admin access required).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "✅ User deleted successfully!"
                }
              }
            }
          },
          "400": {
            "description": "User ID is required.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "User ID is required."
                }
              }
            }
          },
          "403": {
            "description": "Admins cannot be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "Admins cannot be deleted!"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - Failed to delete user.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "Failed to delete user."
                }
              }
            }
          }
        }
      }
    },
    "/{roomId}": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "description": "Retrieve details of a specific room.",
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the room to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Room details retrieved successfully.",
            "content": {
              "text/html": {}
            }
          },
          "404": {
            "description": "Room not found."
          },
          "500": {
            "description": "Internal server error - Failed to fetch room details."
          }
        }
      }
    },
    "/rooms/add": {
      "post": {
        "tags": [
          "Rooms"
        ],
        "description": "Create a new room (Admin Only).",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Room details to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Room"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Room added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "✅ Room added successfully!"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "❌ Capacity, price, and hotelId are required!"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error - Failed to add room.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "❌ Internal server error."
                }
              }
            }
          }
        }
      }
    },
    "/signup": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "description": "Render the signup page.",
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "Signup page rendered successfully.",
            "content": {
              "text/html": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "User signup and auto-login.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User registration details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully and logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "User created successfully and logged in."
                }
              }
            }
          },
          "400": {
            "description": "Validation error - Missing required fields or username taken."
          },
          "500": {
            "description": "Internal server error during signup."
          }
        }
      }
    },
    "/login": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "description": "Render the login page.",
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "Login page rendered successfully.",
            "content": {
              "text/html": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "User login using local authentication strategy.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User login credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "User logged in successfully."
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          }
        }
      }
    },
    "/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "description": "User logout and session termination.",
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "User logged out successfully.",
            "content": {
              "text/html": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Logout endpoint using POST request.",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User logged out successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "User logged out successfully."
                }
              }
            }
          }
        }
      }
    },
    "/admin": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Retrieves all necessary data for the admin panel. Admin access only.",
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "Admin panel rendered successfully.",
            "content": {
              "text/html": {}
            }
          },
          "403": {
            "description": "Forbidden - Admin access required.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "Forbidden - Admin access required."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to load admin panel.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "Failed to load the admin panel."
                }
              }
            }
          }
        }
      }
    },
    "/reservations/{reservationId}": {
      "delete": {
        "tags": [
          "Reservations"
        ],
        "description": "Cancel an existing reservation by its ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the reservation to be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": "Reservation canceled successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "✅ Reservation canceled successfully!"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Reservation ID is required.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "Reservation ID is required."
                }
              }
            }
          },
          "404": {
            "description": "Reservation not found.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "Reservation not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - Failed to cancel reservation.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "Failed to cancel reservation."
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Reservations"
        ],
        "description": "Retrieve details of a specific reservation.",
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the reservation to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Reservation details retrieved successfully.",
            "content": {
              "text/html": {
                "schema": {
                  "title": "Reservation Details",
                  "reservation": {
                    "id": 1,
                    "user": {
                      "id": 3,
                      "name": "John Doe",
                      "email": "john@example.com"
                    },
                    "hotel": {
                      "id": 2,
                      "name": "Grand Hotel",
                      "location": "New York"
                    },
                    "room": {
                      "id": 5,
                      "type": "Suite",
                      "price": 200
                    },
                    "startDate": "2025-03-20",
                    "endDate": "2025-03-25"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Reservation not found.",
            "content": {
              "text/html": {
                "schema": {
                  "title": "Error",
                  "message": "Reservation Not Found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - Failed to fetch reservation details.",
            "content": {
              "text/html": {
                "schema": {
                  "title": "Error",
                  "message": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/reservations": {
      "post": {
        "tags": [
          "Reservations"
        ],
        "description": "Create a new reservation (Only authorized users).",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Room reservation details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "number",
                  "example": 1
                },
                "roomId": {
                  "type": "number",
                  "example": 5
                },
                "startDate": {
                  "type": "string",
                  "example": "2025-03-20"
                },
                "endDate": {
                  "type": "string",
                  "example": "2025-03-25"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Room reserved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "success": true,
                  "message": "✅ Room reserved successfully!"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid reservation data.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "❌ Invalid request data."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User must be logged in."
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error - Failed to reserve room.",
            "content": {
              "application/json": {
                "schema": {
                  "message": "❌ Failed to reserve room."
                }
              }
            }
          }
        }
      }
    },
    "/start": {
      "get": {
        "tags": [
          "Start"
        ],
        "description": "Fetch the welcome page with user details or best-rated hotel.",
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved welcome page.",
            "content": {
              "text/html": {
                "schema": {
                  "title": "Welcome",
                  "user": {
                    "id": 1,
                    "username": "john_doe",
                    "role": "User"
                  },
                  "bestHotel": {
                    "id": 5,
                    "name": "Luxury Inn",
                    "avgRating": 4.8
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - Failed to load start page.",
            "content": {
              "text/html": {
                "schema": {
                  "title": "Error",
                  "message": "Failed to load start page."
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Hotel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Example Hotel"
        },
        "location": {
          "type": "string",
          "example": "Example City"
        },
        "rooms": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "capacity": {
                "type": "number",
                "example": 2
              },
              "price": {
                "type": "number",
                "example": 100
              }
            }
          }
        }
      },
      "required": [
        "name",
        "location",
        "rooms"
      ]
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "username": {
          "type": "string",
          "example": "exampleuser"
        },
        "firstName": {
          "type": "string",
          "example": "First"
        },
        "lastName": {
          "type": "string",
          "example": "Last"
        },
        "email": {
          "type": "string",
          "example": "user@example.com"
        },
        "role": {
          "type": "string",
          "example": "User"
        }
      },
      "required": [
        "id",
        "username",
        "firstName",
        "lastName",
        "email",
        "role"
      ]
    },
    "Room": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "capacity": {
          "type": "number",
          "example": 2
        },
        "price": {
          "type": "number",
          "example": 100
        },
        "hotelId": {
          "type": "number",
          "example": 1
        }
      },
      "required": [
        "id",
        "capacity",
        "price",
        "hotelId"
      ]
    },
    "Reservation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "userId": {
          "type": "number",
          "example": 1
        },
        "roomId": {
          "type": "number",
          "example": 1
        },
        "startDate": {
          "type": "string",
          "example": "2024-03-20"
        },
        "endDate": {
          "type": "string",
          "example": "2024-03-25"
        }
      },
      "required": [
        "id",
        "userId",
        "roomId",
        "startDate",
        "endDate"
      ]
    },
    "AuthMiddleware": {
      "type": "object",
      "properties": {
        "checkIfAuthorized": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "example": "Ensures the user is logged in. Returns 401 Unauthorized if not logged in, 403 Forbidden if the user lacks permissions."
            }
          }
        },
        "checkIfAdmin": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "example": "Ensures only Admins can access a route. Returns 403 Forbidden if unauthorized."
            }
          }
        },
        "canSeeUserDetails": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "example": "Allows users to view their own details, or Admins to view all users."
            }
          }
        },
        "canSeeUserList": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "example": "Allows only Admins to view the full user list."
            }
          }
        }
      }
    }
  }
}